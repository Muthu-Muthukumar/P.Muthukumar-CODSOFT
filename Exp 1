%{

#include <stdio.h>

#include <string.h>

void print_token(char *type, char *value) {

 printf("%s: %s\n", type, value);

}

%}

%option noyywrap

/* Define the patterns for tokens */

%%

"int"|"float"|"double"|"char"|"void" { print_token("KEYWORD", yytext); }

[a-zA-Z_][a-zA-Z0-9_]* { print_token("IDENTIFIER", yytext); }

"=="|"!="|"<"|"<="|">"|">="|"+"|"-"|"*"|"/" { print_token("OPERATOR", yytext); }

[0-9]+ { print_token("NUMBER", yytext); }

" "|\t|\n { /* Ignore whitespace */ }

. { printf("UNKNOWN: %s\n", yytext); }

%% 

int main(void) {

 yylex(); // Start the lexical analysis

 return 0;

}

int yywrap(void) {

 return 1; // Indicate end of input

}

Run:

lex c_lexer.l

gcc lex.yy.c

./a.out
